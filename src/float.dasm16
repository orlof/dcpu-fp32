;
; Public api functions are marked as extern
; Arguments are pushed to stack in right to left order
; int16 values are returned in stack
;

;----------------------------------------------------------------
; extern void float_negate(float *value, float *result)
;----------------------------------------------------------------
:float_negate
    set push, i                 ; store registers
    set push, j

	;---------------------------------------
    ; [sp + 4] result
    ; [sp + 3] value
    ; [sp + 2] rts
    ; [sp + 1] i
    ; [sp + 0] j
	;---------------------------------------

    set i, [sp + 3]
    set j, [sp + 4]

    sti [j], [i]
    sti [j], [i]
    sti [j], [i]
    sti [j], [i]

	; change sign
	mli [j - 4], -1

	set j, pop
	set i, pop
	set pc, pop

;----------------------------------------------------------------
; extern void float_abs(float *value, float *result)
;----------------------------------------------------------------
:float_abs
    set push, i                 ; store registers
    set push, j

	;---------------------------------------
    ; [sp + 4] result
    ; [sp + 3] value
    ; [sp + 2] rts
    ; [sp + 1] i
    ; [sp + 0] j
	;---------------------------------------

    set i, [sp + 3]
    set j, [sp + 4]

    sti [j], [i]
    sti [j], [i]
    sti [j], [i]
    sti [j], [i]

	; change sign
    sub j, 4
	ifa [j], 0
		mli [j], -1

	set j, pop
	set i, pop
	set pc, pop

;----------------------------------------------------------------
; extern void float_from_uint16(uint16 value, float *result)
;----------------------------------------------------------------
:float_from_uint16
	set push, a
	set push, b
	set push, c

	;---------------------------------------
    ; [sp + 5] result
    ; [sp + 4] value
    ; [sp + 3] rts
    ; [sp + 2] a
    ; [sp + 1] b
    ; [sp + 0] c
	;---------------------------------------

	set c, [sp + 5]

	set [c], FLOAT_TYPE_PNUM
	set [c + 1], 0x801f
	set [c + 2], 0
	set [c + 3], [sp + 4]

	; normalize result
	jsr float__nlz32

	shl [c + FLOAT_HIGH], a
	shl [c + FLOAT_LOW], a
	bor [c + FLOAT_HIGH], ex

	sub [c + FLOAT_EXP], a

	ife a, 32
		set [c], FLOAT_TYPE_PZERO

	set c, pop
	set b, pop
	set a, pop
	set pc, pop

;----------------------------------------------------------------
; extern uint16 float_to_uint16(float *value)
;----------------------------------------------------------------
:float_to_uint16
    set push, [sp]              ; make room for return value

	set push, a
	set push, b

	;---------------------------------------
    ; [sp + 4] value
    ; [sp + 3] result
    ; [sp + 2] rts
    ; [sp + 1] a
    ; [sp + 0] b
	;---------------------------------------

	set a, [sp + 4]

	ifa [a], FLOAT_TYPE_PNUM
		set pc, float_to_uint16__return_zero

	ifu [a], FLOAT_TYPE_PNUM
		set pc, float_to_uint16__return_zero

	ifa [a + FLOAT_EXP], 0x800f
		set pc, float_to_uint16__return_zero

	ifu [a + FLOAT_EXP], 0x8000
		set pc, float_to_uint16__return_zero

	set b, 0x800f
	sub b, [a + FLOAT_EXP]

	set [sp + 3], [a + FLOAT_HIGH]
	shr [sp + 3], b

	set pc, float_to_uint16__return

:float_to_uint16__return_zero
	set [sp + 3], 0

:float_to_uint16__return
	set b, pop
	set a, pop
	set pc, pop

;----------------------------------------------------------------
; extern int16 float_cmp(float *left, float *right)
;----------------------------------------------------------------
:float_cmp
    set push, [sp]              ; make room for return value

    set push, i                 ; store registers
    set push, j

	;---------------------------------------
    ; [sp + 5] right
    ; [sp + 4] left
    ; [sp + 3] result
    ; [sp + 2] rts
    ; [sp + 1] i
    ; [sp + 0] j
	;---------------------------------------

	set i, [sp + 4]             ; float *left
	set j, [sp + 5]             ; float *right

	; compare types
    set [sp + 3], 0             ; zero return value

    ifu [i], [j]
        set [sp + 3], 1

    ifa [i], [j]
        set [sp + 3], -1

    ifn [sp + 3], 0             ; different types?
        set pc, float_cmp__finish
	; left.type == right.type

	ifn [i], FLOAT_TYPE_PNUM    ; special values?
    	ifn [i], FLOAT_TYPE_NNUM
            set pc, float_cmp__finish

	; compare two positive or two negative numbers
    jsr _float_cmp_abs
    set [sp + 3], pop

    ; negate result if arguments are negative
	ifa [i], 0
		mli [sp + 3], -1

:float_cmp__finish
	;---------------------------------------
	; postamble
	;---------------------------------------
    set j, pop
    set i, pop
	set pc, pop

;----------------------------------------------------------------
; extern void float_sub(float *left, float *right, float *result)
;----------------------------------------------------------------
:float_sub
    set push, i                 ; store i
    set i, [sp + 3]             ; float *right

    ; copy right
    set push, [i + FLOAT_LOW]
    set push, [i + FLOAT_HIGH]
    set push, [i + FLOAT_EXP]
    set push, [i + FLOAT_TYPE]
    set i, sp

    mli [i], -1                 ; negate right

	;---------------------------------------
    ; [sp + 8] float *result
    ; [sp + 7] float *right
    ; [sp + 6] float *left
    ; [sp + 5] rts
    ; [sp + 4] i
    ; [sp + 3] tmp.low
    ; [sp + 2] tmp.high
    ; [sp + 1] tmp.exp
    ; [sp + 0] tmp.type

    ; make float_add call
    set push, [sp + 8]          ; original result
    set push, i                 ; negated right
    set push, [sp + 8]          ; original left
    jsr float_add

    add sp, 7                   ; clean stack (negated right, add arguments)
    set i, pop                  ; restore i

    set pc, pop

;----------------------------------------------------------------
; extern void float_add(float *left, float *right, float *result)
;----------------------------------------------------------------
:float_add
    set push, a                 ; store registers
    set push, b
    set push, c
    set push, i
    set push, j
    set push, z

    set z, sp

	;---------------------------------------
    ; [sp + 9] float *result
    ; [sp + 8] float *right
    ; [sp + 7] float *left
    ; [sp + 6] rts
    ; [sp + 5] a
    ; [sp + 4] b
    ; [sp + 3] c
    ; [sp + 2] i
    ; [sp + 1] j
    ; [sp + 0] z

	set i, [sp + 7]     ; float *left
	set j, [sp + 8]     ; float *right

	;---------------------------------------
	; check special cases
	;---------------------------------------
	set a, float_add__special_values
	set pc, _float__special_values

:float__add_num
	;---------------------------------------
    ; i = clone(abs(left) >= abs(right) ? left: right)
    ; j = abs(left) < abs(right) ? left: right
	;---------------------------------------
    jsr _float_cmp_abs

	; i = max(left, right)
	; j = min(left, right)
    ife -1, pop
        set i, j                ; i = float *right
    ife i, j
        set j, [sp + 7]         ; j = float *left

	;---------------------------------------
	; align exponents
	;---------------------------------------

	; calculate exponent diff
	set c, [i + FLOAT_EXP]
	sub c, [j + FLOAT_EXP]

	; quick exit if j is too small
	ifg c, 31
		set pc, float__return_i

	; shift mantissa for calculation
	set b, [j + FLOAT_LOW]
	shr b, c

	set a, [j + FLOAT_HIGH]
	shr a, c

    ; copy max(left, right) to result
    set c, [sp + 9]
    set [c + FLOAT_TYPE], [i + FLOAT_TYPE]
    set [c + FLOAT_EXP], [i + FLOAT_EXP]
    set [c + FLOAT_HIGH], [i + FLOAT_HIGH]
    set [c + FLOAT_LOW], [i + FLOAT_LOW]

	; which method to use?
	ife [i], [j]                ; sgn(i) == sgn(j)
		set pc, float_add__op_add

:float_add__op_sub
	bor b, ex

	sub [c + FLOAT_LOW], b
	sbx [c + FLOAT_HIGH], a

    ife [c + FLOAT_LOW], 0
        ife [c + FLOAT_HIGH], 0
            set pc, float__return_pzero

	; normalize result
	jsr float__nlz32

	shl [c + FLOAT_HIGH], a
	shl [c + FLOAT_LOW], a
	bor [c + FLOAT_HIGH], ex

	sub [c + FLOAT_EXP], a
	ife ex, 0
		set pc, float__return

	set pc, float__return_zero

:float_add__op_add
	adx [c + FLOAT_LOW], b
	adx [c + FLOAT_HIGH], a

    ife [c + FLOAT_LOW], 0
        ife [c + FLOAT_HIGH], 0
            ife ex, 0
                set pc, float__return_pzero

	ife ex, 0							; no overflow?
		set pc, float__return

	; normalize result
	shr [c + FLOAT_LOW], 1
	shr [c + FLOAT_HIGH], 1
	bor [c + FLOAT_LOW], ex
	bor [c + FLOAT_HIGH], 0x8000

	add [c + FLOAT_EXP], 1
	ife ex, 0
		set pc, float__return

	set pc, float__return_inf


;----------------------------------------------------------------
; extern void float_mul(float *left, float *right, float *result)
;----------------------------------------------------------------
:float_mul
    set push, a                 ; store registers
    set push, b
    set push, c
    set push, i
    set push, j
    set push, z

    set z, sp

	;---------------------------------------
    ; [sp + 9] float *result
    ; [sp + 8] float *right
    ; [sp + 7] float *left
    ; [sp + 6] rts
    ; [sp + 5] a
    ; [sp + 4] b
    ; [sp + 3] c
    ; [sp + 2] i
    ; [sp + 1] j
    ; [sp + 0] z

	set i, [sp + 7]     ; float *left
	set j, [sp + 8]     ; float *right

    sub sp, 6

	; check special cases
	set a, float_mul__special_values
	set pc, _float__special_values

	;---------------------------------------
:float__mul_nnum
    set [sp + FLOAT_TYPE], FLOAT_TYPE_NNUM
    set pc, float__mul_num

:float__mul_pnum
    set [sp + FLOAT_TYPE], FLOAT_TYPE_PNUM

:float__mul_num
	;---------------------------------------
	; calculate exponent
	;---------------------------------------
	; is all this really needed to detect overflow?
    set a, [i + FLOAT_EXP]
    sub a, FLOAT_EXP_BIAS    		; remove bias

	set b, [j + FLOAT_EXP]
    sub b, FLOAT_EXP_BIAS    		; remove bias

	set c, a			    		; calculate sum to c
    add c, b

    xor a, c			    		; does arg1.exp and result.exp have different sign
    xor b, c			    		; does arg2.exp and result.exp have different sign
    and a, b		    			; both operands have different sign than sum

	; value for overflow exit
	set b, float__return_inf		; assume overflow as default
	ifl [i + FLOAT_EXP], FLOAT_EXP_BIAS ; ...unless exp<0 then assume underflow
		set b, float__return_zero

	ifb a, 0x8000				    ; finally test overflow
      set pc, b					    ; and act accordingly

	add c, FLOAT_EXP_BIAS + 1	    ; restore bias
	set [sp + FLOAT_EXP], c	        ; set exponent

	;---------------------------------------
	; calculate mantissa
	;---------------------------------------
    set [sp + FLOAT_LOW + 2], [j + FLOAT_LOW]
    mul [sp + FLOAT_LOW + 2], [i + FLOAT_LOW]

	set [sp + FLOAT_LOW + 1], ex

    set a, [i + FLOAT_HIGH]
    mul a, [j + FLOAT_LOW]
    set [sp + FLOAT_LOW], ex
	add [sp + FLOAT_LOW + 1], a
	add [sp + FLOAT_LOW], ex

	set a, [i + FLOAT_LOW]
	mul a, [j + FLOAT_HIGH]
	add [sp + FLOAT_LOW], ex
	set [sp + FLOAT_HIGH], ex
	add [sp + FLOAT_LOW + 1], a
	add [sp + FLOAT_LOW], ex
	add [sp + FLOAT_HIGH], ex

	set a, [i + FLOAT_HIGH]
	mul a, [j + FLOAT_HIGH]
	add [sp + FLOAT_HIGH], ex
	add [sp + FLOAT_LOW], a
	add [sp + FLOAT_HIGH], ex

	;---------------------------------------
    ; normalize result
	;---------------------------------------
    ifb [sp + FLOAT_HIGH], 0x8000
        set pc, float__mul__no_normalize

	shl [sp + FLOAT_HIGH], 1
	shl [sp + FLOAT_LOW], 1
	bor [sp + FLOAT_HIGH], ex
    ifb [sp + FLOAT_LOW + 1], 0x8000
        bor [sp + FLOAT_LOW], 0x0001

	sub [sp + FLOAT_EXP], 1

:float__mul__no_normalize
    set i, sp
    set pc, float__return_i


;----------------------------------------------------------------
; extern void float_div(float *left, float *right, float *result)
;----------------------------------------------------------------
:float_div
    set push, a                 ; store registers
    set push, b
    set push, c
    set push, i
    set push, j
    set push, z

    set z, sp

	set i, [sp + 7]     ; float *left
	set j, [sp + 8]     ; float *right

	; copy divident mantissa to stack
	set push, [i + FLOAT_LOW]
	set push, [i + FLOAT_HIGH]

	; allocate space for quotient
    sub sp, 4

	;---------------------------------------
    ; [sp +15] float *result
    ; [sp +14] float *right
    ; [sp +13] float *left
    ; [sp +12] rts
    ; [sp +11] a
    ; [sp +10] b
    ; [sp + 9] c
    ; [sp + 8] i
    ; [sp + 7] j
    ; [sp + 6] z
    ; [sp + 5] divident.low
    ; [sp + 4] divident.high
    ; [sp + 3] quotient.low
    ; [sp + 2] quotient.high
    ; [sp + 1] quotient.exp
    ; [sp + 0] quotient.type

	; check special cases
	set a, float_div__special_values
	set pc, _float__special_values

	;---------------------------------------
:float__div_nnum
    set [sp + FLOAT_TYPE], FLOAT_TYPE_NNUM
    set pc, float__div_num

:float__div_pnum
    set [sp + FLOAT_TYPE], FLOAT_TYPE_PNUM

:float__div_num
	;---------------------------------------
	; calculate exponent
	;---------------------------------------
	; is all this really needed to detect overflow?
    set a, [i + FLOAT_EXP]          ; divident exponent
    sub a, FLOAT_EXP_BIAS    		; remove bias

	set b, [j + FLOAT_EXP]          ; divisor exponent
    sub b, FLOAT_EXP_BIAS    		; remove bias

	set c, a			    		; quotient.exp = divident.exp - divisor.exp
    sub c, b

	; signed arithmetic overflow test
	; c = a - b -> "((a ^ b) & !(b ^ c)) < 0"
    xor a, b                        ; does arg1.exp and arg2.exp have different sign
    xor b, c                        ; does arg2.exp and result.exp have different sign
    xor b, 0xffff                   ; does arg2.exp and result.exp have same sign
    and a, b                        ; !sgn(arg1.exp, arg2.exp) and sgn(arg2.exp, result.exp)

    ; value for overflow exit
    set b, float__return_inf        ; assume overflow as default
    ifc c, 0x8000
        set b, float__return_zero

    ifb a, 0x8000                   ; finally test overflow
      set pc, b                     ; and act accordingly

	add c, FLOAT_EXP_BIAS		    ; restore bias
	set [sp + FLOAT_EXP], c	        ; set exponent

	; [sp + 5] divident.low
	; [sp + 4] divident.high
	; [sp + 0] quotient
	; [j]      divisor
	; a        current quotient word
	; b        temp
	; c        current quotient word number

	set a, 1 ; set sentinel
	set c, 0 ; current word number

:float__div__cmp
	; see if divisor can be subtracted from divident
	; b=1 can, b=0 cannot
	set b, 1

	ife [sp + 4], [j + FLOAT_HIGH]
		ifl [sp + 5], [j + FLOAT_LOW]
			set b, 0

	ifl [sp + 4], [j + FLOAT_HIGH]
		set b, 0

:float__div__next_bit
    ; shift quotient
	shl a, 1
	bor a, b

	ife 0, ex						; no sentinel out
		set pc, float__div__no_word

	ifn c, 0						; all words completed?
		set pc, float__div__normalize

	set c, 1
	set [sp + FLOAT_HIGH], a 		; store high word
	set a, 1 						; restart sentinel

:float__div__no_word
	ife b, 0 						; do subtract if possible
		set pc, float__div__shift_divident

	; subtract
	sub [sp + 5], [j + FLOAT_LOW]
	sbx [sp + 4], [j + FLOAT_HIGH]

:float__div__shift_divident
	shl [sp + 4], 1
	set b, ex
	shl [sp + 5], 1
	bor [sp + 4], ex

	ife b, 1
		set pc, float__div__next_bit

;   optional optimization
;	ifc [sp + 4], 0x8000
;		set pc, float__div__next_bit

	set pc, float__div__cmp

:float__div__normalize
	set [sp + FLOAT_LOW], a

	set c, sp
	set i, sp
	jsr float__nlz32

	shl [c + FLOAT_HIGH], a
	shl [c + FLOAT_LOW], a
	bor [c + FLOAT_HIGH], ex

	sub [c + FLOAT_EXP], a
	ife ex, 0
		set pc, float__return_i

	set pc, float__return_zero


;----------------------------------------------------------------
:float__return_j
    set i, j

:float__return_i
    set j, [z + 9]
    set [j + FLOAT_TYPE], [i + FLOAT_TYPE]
    set [j + FLOAT_EXP], [i + FLOAT_EXP]
    set [j + FLOAT_HIGH], [i + FLOAT_HIGH]
    set [j + FLOAT_LOW], [i + FLOAT_LOW]
    set pc, float__return

;----------------------------------------------------------------
:float__return_nan
    set a, FLOAT_TYPE_NAN
	set pc, float__return_a_type

;----------------------------------------------------------------
:float__return_dbz
    set a, FLOAT_TYPE_DBZ
	set pc, float__return_a_type

;----------------------------------------------------------------
:float__return_inf
    set a, FLOAT_TYPE_PINF
    set pc, float__return_abs_a_type
;----------------------------------------------------------------
:float__return_pinf
    set a, FLOAT_TYPE_PINF
	set pc, float__return_a_type
;----------------------------------------------------------------
:float__return_ninf
    set a, FLOAT_TYPE_NINF
	set pc, float__return_a_type

;----------------------------------------------------------------
:float__return_zero
    set a, FLOAT_TYPE_PZERO
    set pc, float__return_abs_a_type
;----------------------------------------------------------------
:float__return_pzero
    set a, FLOAT_TYPE_PZERO
	set pc, float__return_a_type
;----------------------------------------------------------------
:float__return_nzero
    set a, FLOAT_TYPE_NZERO
	set pc, float__return_a_type

;----------------------------------------------------------------
:float__return_abs_a_type
    set i, [z + 9]
    ifa [i], 0
        mli a, -1

:float__return_a_type
    set i, [z + 9]
    set [i], a

;----------------------------------------------------------------
:float__return
    set sp, z
    set z, pop
	set j, pop
	set i, pop
	set c, pop
	set b, pop
	set a, pop

	set pc, pop

;----------------------------------------------------------------
:float__nlz32
; fastcall
;  c: float *f
; return
;  a: number of leading zeroes
;  b: garbage
; cycles: 43
;----------------------------------------------------------------
	set a, 0
	set b, [c + FLOAT_HIGH]
	ifb b, 0xffff
		set pc, float__nlz16

	set a, 16
	set b, [c + FLOAT_LOW]

:float__nlz16
	ifb b, 0xff00
		set pc, float__nlz8

	add a, 8
	shl b, 8

:float__nlz8
	ifb b, 0xf000
		set pc, float__nlz4

	add a, 4
	shl b, 4

:float__nlz4
	ifb b, 0xc000
		set pc, float__nlz2

	add a, 2
	shl b, 2

:float__nlz2
	ifb b, 0x8000
		set pc, pop

	add a, 1

    ifb b, 0x4000
        set pc, pop

	set a, 32
	set pc, pop

;----------------------------------------------------------------
:_float_cmp_abs
; fastcall
;  i: float *left
;  j: float *right
; return
;  [sp]:
;    1 if abs(left) > abs(right)
;    0 if abs(left) == abs(right)
;   -1 if abs(left) < abs(right)
; cycles: 36
;----------------------------------------------------------------
    set push, [sp]
    set [sp+1], 0
    ; compare low
	ifg [i + FLOAT_LOW], [j + FLOAT_LOW]
        set [sp + 1], 1
	ifl [i + FLOAT_LOW], [j + FLOAT_LOW]
        set [sp + 1], -1

    ; compare high
	ifg [i + FLOAT_HIGH], [j + FLOAT_HIGH]
        set [sp + 1], 1
	ifl [i + FLOAT_HIGH], [j + FLOAT_HIGH]
        set [sp + 1], -1

    ; compare exp
	ifg [i + FLOAT_EXP], [j + FLOAT_EXP]
        set [sp + 1], 1
	ifl [i + FLOAT_EXP], [j + FLOAT_EXP]
        set [sp + 1], -1

    set pc, pop

;----------------------------------------------------------------
:_float__special_values
; fastcall
;   a        pointer to special value table
;   i        float *f1
;   j        float *f2
; cycles: 27
; clobbers: b
;----------------------------------------------------------------
	ife [i], FLOAT_TYPE_NAN
        set pc, float__return_nan
    ife [j], FLOAT_TYPE_NAN
        set pc, float__return_nan

	set b, [j]
	mli b, 6

	add b, 21
	ifa [j], 0
		sub b, 6

	add b, [i]
	ifa [i], 0
		sub b, 1

	add b, a
	set pc, [b]

:float_add__special_values
	;   inf,                num,                0.0,                 -0.0,                -num,              -inf
	dat	float__return_pinf, float__return_pinf, float__return_pinf,  float__return_pinf,  float__return_pinf, float__return_nan  ; inf
	dat	float__return_pinf, float__add_num,     float__return_j,     float__return_j,     float__add_num,     float__return_ninf ; num
	dat	float__return_pinf, float__return_i,    float__return_pzero, float__return_pzero, float__return_i,    float__return_ninf ; 0.0
	dat	float__return_pinf, float__return_i,    float__return_pzero, float__return_nzero, float__return_i,    float__return_ninf ; -0.0
	dat	float__return_pinf, float__add_num,     float__return_j,     float__return_j,     float__add_num,     float__return_ninf ; -num
	dat	float__return_nan,  float__return_ninf, float__return_ninf,  float__return_ninf,  float__return_ninf, float__return_ninf ; -inf

:float_mul__special_values
	;   inf,                num,                 0.0,                 -0.0,                -num,                -inf
	dat	float__return_pinf, float__return_pinf,  float__return_nan,   float__return_nan,   float__return_ninf,  float__return_ninf ; inf
	dat	float__return_pinf, float__mul_pnum,     float__return_pzero, float__return_nzero, float__mul_nnum,     float__return_ninf ; num
	dat	float__return_nan,  float__return_pzero, float__return_pzero, float__return_nzero, float__return_nzero, float__return_nan  ; 0.0
	dat	float__return_nan,  float__return_nzero, float__return_nzero, float__return_pzero, float__return_pzero, float__return_nan  ; -0.0
	dat	float__return_ninf, float__mul_nnum,     float__return_nzero, float__return_pzero, float__mul_pnum,     float__return_pinf ; -num
	dat	float__return_ninf, float__return_ninf,  float__return_nan,   float__return_nan,   float__return_pinf,  float__return_pinf ; -inf

:float_div__special_values
	;   inf,                num,                 0.0,                 -0.0,                -num,                -inf
	dat	float__return_nan,  float__return_pzero, float__return_pzero, float__return_nzero, float__return_nzero, float__return_nan  ; inf
	dat	float__return_pinf, float__div_pnum,     float__return_pzero, float__return_nzero, float__div_nnum,     float__return_ninf ; num
	dat	float__return_dbz,  float__return_dbz,   float__return_dbz,   float__return_dbz,   float__return_dbz,   float__return_dbz  ; 0.0
	dat	float__return_dbz,  float__return_dbz,   float__return_dbz,   float__return_dbz,   float__return_dbz,   float__return_dbz  ; -0.0
	dat	float__return_ninf, float__div_nnum,     float__return_nzero, float__return_pzero, float__div_pnum,     float__return_pinf ; -num
	dat	float__return_nan,  float__return_nzero, float__return_nzero, float__return_pzero, float__return_pzero, float__return_nan  ; -inf
