;----------------------------------------------------------------
;
; unit test cases for float library
;
;----------------------------------------------------------------

    jsr dunit

;----------------------------------------------------------------
:test_cases
;----------------------------------------------------------------
:test__cmp
    set i, test_cmp__data

:test_cmp__loop
    ife [i], -1
        set pc, test_cmp__break

    set push, [i+2]
    set push, [i+1]
    jsr float_cmp

    ifn [i+3], pop
        set pc, dunit__fail

    add sp, 2

    set push, [i+1]
    set push, [i+2]
    jsr float_cmp

    set a, [i+3]
    mli a, -1
    ifn a, pop
        set pc, dunit__fail

    add sp, 2
    add i, 4
    set pc, test_cmp__loop

:test_cmp__break

;----------------------------------------------------------------
:test__add
    set i, test_add__data
    set a, f_result
    set push, a

:test_add__loop
    ife [i], -1
        set pc, test_add__break

    set [a], 0
    set [a+1], 0
    set [a+2], 0
    set [a+3], 0

    set push, [i+2]
    set push, [i+1]
    jsr float_add

    set b, [i+3]
    ifn [b], [a]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_add__verify_end1
	ifn [b+1], [a+1]
        set pc, dunit__fail
    ifn [b+2], [a+2]
        set pc, dunit__fail
    ifn [b+3], [a+3]
        set pc, dunit__fail

:test_add__verify_end1
    add sp, 2

    set [a], 0
    set [a+1], 0
    set [a+2], 0
    set [a+3], 0

    set push, [i+1]
    set push, [i+2]
    jsr float_add

    ifn [b], [a]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_add__verify_end2
	ifn [b+1], [a+1]
        set pc, dunit__fail
    ifn [b+2], [a+2]
        set pc, dunit__fail
    ifn [b+3], [a+3]
        set pc, dunit__fail

:test_add__verify_end2
    add sp, 2
    add i, 4
    set pc, test_add__loop

:test_add__break
	add sp, 1

;----------------------------------------------------------------
:test__sub
    set i, test_sub__data
    set a, f_result
    set push, a

:test_sub__loop
    ife [i], -1
        set pc, test_sub__break

    set [a], 0
    set [a+1], 0
    set [a+2], 0
    set [a+3], 0

    set push, [i+2]
    set push, [i+1]
    jsr float_sub

    set b, [i+3]
    ifn [b], [a]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_sub__verify_end1
	ifn [b+1], [a+1]
        set pc, dunit__fail
    ifn [b+2], [a+2]
        set pc, dunit__fail
    ifn [b+3], [a+3]
        set pc, dunit__fail

:test_sub__verify_end1
    add sp, 2
    add i, 4
    set pc, test_sub__loop

:test_sub__break
	add sp, 1

;----------------------------------------------------------------
:test__overwrite
    set i, test_overwrite__data

:test_overwrite__loop
    ife [i], -1
        set pc, test_overwrite__break

	set a, f_left	
    set [a], [f_p1_0]
    set [a+1], [f_p1_0 + 1]
    set [a+2], [f_p1_0 + 2]
    set [a+3], [f_p1_0 + 3]
	set a, f_right
    set [a], [f_p1_0]
    set [a+1], [f_p1_0 + 1]
    set [a+2], [f_p1_0 + 2]
    set [a+3], [f_p1_0 + 3]
	set a, f_result
    set [a], [f_p1_0]
    set [a+1], [f_p1_0 + 1]
    set [a+2], [f_p1_0 + 2]
    set [a+3], [f_p1_0 + 3]

	set push, [i + 4]
	set push, [i + 3]
	set push, [i + 2]
	
	jsr [i + 1]
    add sp, 3

	set a, [i + 2]
	set b, [i + 5]
	
	ifn [a], [b]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_overwrite__verify_end1
	ifn [a+1], [b+1]
        set pc, dunit__fail
	ifn [a+2], [b+2]
        set pc, dunit__fail
	ifn [a+3], [b+3]
        set pc, dunit__fail

:test_overwrite__verify_end1
	set a, [i + 3]
	set b, [i + 6]
	
	ifn [a], [b]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_overwrite__verify_end2
	ifn [a+1], [b+1]
        set pc, dunit__fail
	ifn [a+2], [b+2]
        set pc, dunit__fail
	ifn [a+3], [b+3]
        set pc, dunit__fail

:test_overwrite__verify_end2
	set a, [i + 4]
	set b, [i + 7]
	
	ifn [a], [b]
        set pc, dunit__fail
	ifn [b], FLOAT_TYPE_PNUM
		ifn [b], FLOAT_TYPE_NNUM
			set pc, test_overwrite__verify_end3
	ifn [a+1], [b+1]
        set pc, dunit__fail
	ifn [a+2], [b+2]
        set pc, dunit__fail
	ifn [a+3], [b+3]
        set pc, dunit__fail

:test_overwrite__verify_end3
    add i, 8
    set pc, test_overwrite__loop

:test_overwrite__break
;----------------------------------------------------------------

    set pc, dunit__pass

;----------------------------------------------------------------
; TEST DATA
;----------------------------------------------------------------
:test_cmp__data 
dat    0x0001, f_nan, f_nan, 0
dat    0x0002, f_nan, f_pinf, 1
dat    0x0003, f_nan, f_pzero, 1
dat    0x0004, f_nan, f_nzero, 1
dat    0x0005, f_nan, f_ninf, 1

dat    0x0011, f_pinf, f_pinf, 0
dat    0x0012, f_pinf, f_pzero, 1
dat    0x0013, f_pinf, f_nzero, 1
dat    0x0014, f_pinf, f_ninf, 1

dat    0x0021, f_pzero, f_pzero, 0
dat    0x0022, f_pzero, f_nzero, 1
dat    0x0023, f_pzero, f_ninf, 1

dat    0x0024, f_nzero, f_nzero, 0
dat    0x0025, f_nzero, f_ninf, 1

dat    0x0031, f_ninf, f_ninf, 0

dat    0x0032, f_nan, f_p1_0, 1
dat    0x0033, f_nan, f_n1_0, 1

dat    0x0034, f_pinf, f_p1_0, 1
dat    0x0035, f_pinf, f_n1_0, 1

dat    0x0036, f_ninf, f_p1_0, -1
dat    0x0037, f_ninf, f_n1_0, -1

dat    0x0041, f_pzero, f_p1_0, -1
dat    0x0042, f_pzero, f_n1_0, 1

dat    0x0043, f_nzero, f_p1_0, -1
dat    0x0044, f_nzero, f_n1_0, 1

dat    0x0051, f_p10_0, f_p10_0, 0
dat    0x0052, f_p10_0, f_p8_0, 1
dat    0x0053, f_p10_0, f_p1_0, 1
dat    0x0054, f_p10_0, f_n1_0, 1
dat    0x0055, f_p10_0, f_n8_0, 1
dat    0x0056, f_p10_0, f_n10_0, 1

dat    0x0061, f_p8_0, f_p8_0, 0
dat    0x0062, f_p8_0, f_p1_0, 1
dat    0x0063, f_p8_0, f_n1_0, 1
dat    0x0064, f_p8_0, f_n8_0, 1
dat    0x0065, f_p8_0, f_n10_0, 1

dat    0x0071, f_p1_0, f_p1_0, 0
dat    0x0072, f_p1_0, f_n1_0, 1
dat    0x0073, f_p1_0, f_n8_0, 1
dat    0x0074, f_p1_0, f_n10_0, 1

dat    0x0075, f_n1_0, f_n1_0, 0
dat    0x0076, f_n1_0, f_n8_0, 1
dat    0x0077, f_n1_0, f_n10_0, 1

dat    0x0078, f_n8_0, f_n8_0, 0
dat    0x0079, f_n8_0, f_n10_0, 1

dat    0x007a, f_n10_0, f_n10_0, 0

dat    -1, -1, -1, -1

:test_add__data 
dat    0x1010, f_nan, f_nan, f_nan
dat    0x1011, f_nan, f_pinf, f_nan
dat    0x1012, f_nan, f_pzero, f_nan
dat    0x1013, f_nan, f_nzero, f_nan
dat    0x1014, f_nan, f_ninf, f_nan

dat    0x1015, f_pinf, f_pinf, f_pinf
dat    0x1016, f_pinf, f_pzero, f_pinf
dat    0x1017, f_pinf, f_nzero, f_pinf
dat    0x1018, f_pinf, f_ninf, f_nan

dat    0x1019, f_pzero, f_pzero, f_pzero
dat    0x101a, f_pzero, f_nzero, f_pzero
dat    0x101b, f_pzero, f_ninf, f_ninf

dat    0x101c, f_nzero, f_nzero, f_nzero
dat    0x101d, f_nzero, f_ninf, f_ninf

dat    0x101e, f_ninf, f_ninf, f_ninf

dat    0x101f, f_nan, f_p1_0, f_nan
dat    0x1020, f_nan, f_n1_0, f_nan

dat    0x1021, f_pinf, f_p1_0, f_pinf
dat    0x1022, f_pinf, f_n1_0, f_pinf

dat    0x1023, f_ninf, f_p1_0, f_ninf
dat    0x1024, f_ninf, f_n1_0, f_ninf

dat    0x1025, f_pzero, f_p1_0, f_p1_0
dat    0x1026, f_pzero, f_n1_0, f_n1_0

dat    0x1027, f_nzero, f_p1_0, f_p1_0
dat    0x1028, f_nzero, f_n1_0, f_n1_0

dat    0x1029, f_p10_0, f_n10_0, f_pzero
dat    0x102a, f_p8_0, f_p2_0, f_p10_0
dat    0x102b, f_n8_0, f_n2_0, f_n10_0
dat    0x102c, f_p1_0, f_p1_0, f_p2_0
dat    0x102d, f_n1_0, f_n1_0, f_n2_0

dat    0x1030, f_n8_0, f_p10_0, f_p2_0
dat    0x1031, f_p8_0, f_n10_0, f_n2_0
dat    0x1032, f_n1_0, f_p2_0, f_p1_0
dat    0x1033, f_p1_0, f_n2_0, f_n1_0

dat    -1, -1, -1, -1

:test_sub__data 
dat    0x2010, f_nan, f_nan, f_nan
dat    0x2011, f_nan, f_pinf, f_nan
dat    0x2012, f_nan, f_pzero, f_nan
dat    0x2013, f_nan, f_nzero, f_nan
dat    0x2014, f_nan, f_ninf, f_nan

dat    0x2015, f_pinf, f_pinf, f_nan
dat    0x2016, f_pinf, f_pzero, f_pinf
dat    0x2017, f_pinf, f_nzero, f_pinf
dat    0x2018, f_pinf, f_ninf, f_pinf

dat    0x2019, f_pzero, f_pzero, f_pzero
dat    0x201a, f_pzero, f_nzero, f_pzero
dat    0x201b, f_pzero, f_ninf, f_pinf

dat    0x201c, f_nzero, f_nzero, f_pzero
dat    0x201d, f_nzero, f_ninf, f_pinf

dat    0x201e, f_ninf, f_ninf, f_nan

dat    0x201f, f_nan, f_p1_0, f_nan
dat    0x2020, f_nan, f_n1_0, f_nan

dat    0x2021, f_pinf, f_p1_0, f_pinf
dat    0x2022, f_pinf, f_n1_0, f_pinf

dat    0x2023, f_ninf, f_p1_0, f_ninf
dat    0x2024, f_ninf, f_n1_0, f_ninf

dat    0x2025, f_pzero, f_p1_0, f_n1_0
dat    0x2026, f_pzero, f_n1_0, f_p1_0

dat    0x2027, f_nzero, f_p1_0, f_n1_0
dat    0x2028, f_nzero, f_n1_0, f_p1_0

dat    0x2029, f_n10_0, f_n10_0, f_pzero
dat    0x202a, f_p10_0, f_p2_0, f_p8_0
dat    0x202b, f_n8_0, f_p2_0, f_n10_0
dat    0x202c, f_p1_0, f_n1_0, f_p2_0
dat    0x202d, f_n1_0, f_p1_0, f_n2_0

dat    0x2030, f_p8_0, f_p10_0, f_n2_0
dat    0x2031, f_n8_0, f_n10_0, f_p2_0
dat    0x2032, f_n1_0, f_n2_0, f_p1_0
dat    0x2033, f_p1_0, f_p2_0, f_n1_0

dat    -1, -1, -1, -1

:test_overwrite__data 
dat    0x3001, float_add, f_result, f_result, f_result, f_p2_0, f_p2_0, f_p2_0
dat    0x3002, float_add, f_left, f_result, f_result, f_p1_0, f_p2_0, f_p2_0
dat    0x3003, float_add, f_result, f_right, f_result, f_p2_0, f_p1_0, f_p2_0
dat    0x3004, float_add, f_left, f_left, f_result, f_p1_0, f_p1_0, f_p2_0
dat    0x3011, float_sub, f_result, f_result, f_result, f_pzero, f_pzero, f_pzero
dat    0x3012, float_sub, f_left, f_result, f_result, f_p1_0, f_pzero, f_pzero
dat    0x3013, float_sub, f_result, f_right, f_result, f_pzero, f_p1_0, f_pzero
dat    0x3014, float_sub, f_left, f_left, f_result, f_p1_0, f_p1_0, f_pzero
dat    -1, -1, -1, -1, -1, -1, -1

:f_nan    dat FLOAT_TYPE_NAN, 0, 0, 0
:f_pinf   dat FLOAT_TYPE_PINF, 0, 0, 0
:f_ninf   dat FLOAT_TYPE_NINF, 0, 0, 0
:f_pzero  dat FLOAT_TYPE_PZERO, 0, 0, 0
:f_nzero  dat FLOAT_TYPE_NZERO, 0, 0, 0
:f_p1_0   dat FLOAT_TYPE_PNUM, 0x7fff, 0x8000, 0x0000
:f_n1_0   dat FLOAT_TYPE_NNUM, 0x7fff, 0x8000, 0x0000
:f_p2_0   dat FLOAT_TYPE_PNUM, 0x8000, 0x8000, 0x0000
:f_n2_0   dat FLOAT_TYPE_NNUM, 0x8000, 0x8000, 0x0000
:f_p8_0   dat FLOAT_TYPE_PNUM, 0x8002, 0x8000, 0x0000
:f_n8_0   dat FLOAT_TYPE_NNUM, 0x8002, 0x8000, 0x0000
:f_p10_0  dat FLOAT_TYPE_PNUM, 0x8002, 0xa000, 0x0000
:f_n10_0  dat FLOAT_TYPE_NNUM, 0x8002, 0xa000, 0x0000
:f_left   dat 0,0,0,0
:f_right  dat 0,0,0,0
:f_result dat 0,0,0,0



